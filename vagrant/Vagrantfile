# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
VAGRANTFILE_API_VERSION = '2'
VAGRANTFILE_DIR = File.dirname(__FILE__)
ANSIBLE_INVENTORY_PATH = 'provisioning/inventories/local/hosts.yml'
VIRTUALBOX_INTNET = 'kollanet'
PRIVATE_KEY_PATH = '~/.vagrant.d/insecure_private_key'
VM_BOX = 'almalinux/8'
VM_BOX_VERSION = "8.8.20230606"
# VM_BOX = "centos/stream8"
# VM_BOX_VERSION = "20230710.0"
# VM_BOX = 'generic/centos8s'
# VM_BOX_VERSION = "4.2.16"
DEFAULT_DISK_SIZE = "50GB"
# https://app.vagrantup.com/centos/boxes/stream8/versions/20230710.0/providers/virtualbox.box
# ------------------------
# install required plugins
# ------------------------
required_plugins = %w( vagrant-vbguest vagrant-disksize vagrant-hostmanager )
_retry = false
required_plugins.each do |plugin|
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    _retry=true
  end
end

if (_retry)
  exec "vagrant " + ARGV.join(' ')
end

# ---------------------------
# load inventory file (hosts)
# ---------------------------
begin
  conf = YAML.load_file(File.join(VAGRANTFILE_DIR, ANSIBLE_INVENTORY_PATH))
rescue Errno::ENOENT => ex
  STDERR.puts <<-EOT
    File does not exist. '#{ANSIBLE_INVENTORY_PATH}'
  EOT
  exit;
end

# ---------------------------
# create /etc/hosts content
# ---------------------------
etc_hosts_content = ''
conf['all']['hosts'].each do |host, hostvars|
  etc_hosts_content += hostvars['ip'] + ' ' + hostvars['hostname'] + '\n'
end
etc_hosts_command = 'cat << "EOF" | sudo tee -a /etc/hosts\n' + etc_hosts_content + "EOF"


def add_network_interface(node, net_if, if_idx)
    # print if_idx
    # print net_if['type']
    case net_if['type']
    when 'internal' then
      # node.vm.network :private_network do |net|
      #   # if net_if.fetch('ip', 'dchp') == 'dhcp' then
      #   #   net.type = 'dhcp'
      #   # else
      #   #   net.ip = net_if['ip']
      #   # end
      #   net.ip = net_if['ip']
      #   if net_if.fetch('dchp', false) then
      #     net.type = 'dhcp'
      #     net.dhcp_lower = '172.17.177.10'
      #     net.dhcp_upper = '172.17.177.254'
      #     net.dhcp_ip = '172.17.177.1'
      #   end
      #   net.auto_config = net_if.fetch('auto_config', true)
      #   net.virtualbox__intnet = net_if['network_name']
      # end
      # node.vm.network 'private_network', ip: net_if['ip'], virtualbox__intnet: net_if['network_name']
      node.vm.network 'private_network',
        ip: net_if['ip'],
        type: net_if.fetch('dchp', ''),
        auto_config: net_if.fetch('auto_config', true),
        virtualbox__intnet: net_if['network_name']
    when 'private' then
      params = {ip: net_if['ip'], name: net_if['network_name']}
      if net_if.fetch('virtio', true) then
        params[:nic_type] = "virtio"
      end
      node.vm.network 'private_network', **params
    when 'dhcp' then
      node.vm.network 'private_network',
        # ip: net_if['ip'],
        name: net_if['network_name'],
        # auto_config: net_if.fetch('auto_config', true),
        adapter: 3,
        type: 'dhcp',
        # type: 'dhcp',
        dhcp_ip: net_if['dhcp_ip'],
        dhcp_lower: net_if['dhcp_lower'],
        dhcp_upper: net_if['dhcp_upper']
  
      if net_if.fetch('nat', false) then
        node.vm.provider 'virtualbox' do |vb|
          vb.customize ["modifyvm", :id, format('--nic%<x>d', x: idx + 1), "natnetwork"]
          vb.customize ["modifyvm", :id, format('--nat-network%<x>d', x: idx + 1), "NatNetwork"]
          if net_if.fetch('virtio', true) then
            vb.customize ["modifyvm", :id, format('--nictype%<x>d', x: if_idx), "virtio"]
          end
        end
      end
  
    # when 'bridge' then
    #   node.vm.network 'public_network', ip: net_if['ip']
    when 'nat' then
      # node.vm.network "private_network", :type => 'dhcp'
      node.vm.provider 'virtualbox' do |vb|
        vb.customize ["modifyvm", :id, format('--nic%<x>d', x: if_idx), "natnetwork"]
        vb.customize ["modifyvm", :id, format('--nat-network%<x>d', x: if_idx), net_if['network_name']]
        if net_if.fetch('virtio', true) then
          vb.customize ["modifyvm", :id, format('--nictype%<x>d', x: if_idx), "virtio"]
        end
      end
    when 'unassigned' then
      params = {auto_config: false}
      if net_if.fetch('virtio', true) then
        params[:nic_type] = "virtio"
      end
      node.vm.network 'public_network', **params
    when 'bridge' then
      params = {ip: net_if['ip'], type: net_if.fetch('dhcp', false)? 'dhcp' : 'static'}
      if net_if.fetch('virtio', true) then
        params[:nic_type] = "virtio"
      end
      node.vm.network 'public_network', **params
    else
      nil
    end
    # print format('|%<x>d|', x: if_idx)
    node.vm.provider 'virtualbox' do |vb|
      if net_if.fetch('promiscuous_mode', false) then
        vb.customize ["modifyvm", :id, format('--nicpromisc%<x>d', x: if_idx), "allow-all"]
      end
      # vb.customize ["modifyvm", :id, format('--nictype%<x>d', x: if_idx), "virtio"]
      vb.customize ["modifyvm", :id, format('--cableconnected%<x>d', x: if_idx), "on"]
    end
    # vb.customize ["modifyvm", :id, format('--cable-connected%<x>d', x: if_idx), "on"]
  # end
end


# ---------------------------
# Vagrant
# ---------------------------
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # disk size, Box (OS), Box version
  config.disksize.size = DEFAULT_DISK_SIZE
  config.vm.box = VM_BOX
  # config.vm.box_version = VM_BOX_VERSION
  # Use the same key for each node
  config.ssh.insert_key = false
  config.hostmanager.enabled = true
  # config.vbguest.auto_update = false

  conf['all']['hosts'].each do |host, hostvars|
    config.vm.define host do |node|
      # set hostname as inventory hostname
      node.vm.hostname = hostvars['hostname']

      if hostvars.has_key?('remove_etc_hosts_localhost') and hostvars['remove_etc_hosts_localhost'] then
        node.vm.provision 'shell', privileged: true, inline: "sed -i -E 's/^127\..*"+hostvars['hostname']+".*/#&/g' /etc/hosts"
      end
      
      # # # if disk_size exists in the inventory, set disk size
      # # print "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"
      # if hostvars.has_key? 'disk_size' then
      #   print "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\n"
      #   # node.vm.disk :disk, size: hostvars['disk_size'], primary: true
      #   config.disksize.size = hostvars['disk_size']
      # else
      #   print "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n"
      #   config.disksize.size = DEFAULT_DISK_SIZE
      # end
      


      # node.vm.network 'private_network', ip: hostvars['ip'], virtualbox__intnet: VIRTUALBOX_INTNET

      # network interface settings
      hostvars.fetch('network_interfaces',[]).each_with_index do |net_if, idx|
        if_idx = idx + 2
        add_network_interface(node, net_if, if_idx)
      end
      
      # Virtualbox Settings
      node.vm.provider 'virtualbox' do |vb|
        vb.customize ["modifyvm", :id, "--firmware", "efi"]
        vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
        vb.customize ["modifyvm", :id, "--nictype1",  "virtio"]
        
        # sync host time
        vb.customize ["setextradata", :id, "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled", 0]
        
        # set display name in virtualbox
        vb.name = hostvars['hostname']

        # set CPUs
        if hostvars.has_key? 'cpus' then
          vb.cpus = hostvars['cpus']
        end

        # set memory size
        if hostvars.has_key? 'memory_size' then
          vb.memory = hostvars['memory_size']
        end
      end

      # synced_folder
      hostvars.fetch('synced_folder', []).each do |folder|
        node.vm.synced_folder File.join(VAGRANTFILE_DIR, folder['host']), folder['guest']
      end
      # if hostvars.has_key? 'synced_folder' then
      #   # node.vm.provision 'shell', privileged: false, inline: <<-SHELL
      #   #   yum install kernel-devel
      #   #   yum -y update kernel
      #   # SHELL
        
      #   hostvars.fetch('synced_folder', []).each do |folder|
      #     node.vm.synced_folder File.join(VAGRANTFILE_DIR, folder['host']), folder['guest']
      #   end
      # end

      # run povision pre commands
      if hostvars.has_key? 'provision_pre_commands' then
        hostvars['provision_pre_commands'].each do |pre_command|
          node.vm.provision 'shell', privileged: false, inline: pre_command
        end
      end

      # copy private key if 'copy_private_key: true' is specified
      if hostvars.fetch('copy_private_key', false) then
        node.vm.provision 'file', source: PRIVATE_KEY_PATH, destination: '~/.ssh/insecure_private_key'
        node.vm.provision 'shell', privileged: false, inline: <<-SHELL
          chmod 600 ~/.ssh/insecure_private_key
          cat ~/.ssh/insecure_private_key >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        SHELL
      end

      # set hostname/ip to /etc/hosts
      # node.vm.provision 'shell', privileged: false, inline: etc_hosts_command

      # reboot VM if reboot_after_provision=true
      if hostvars.fetch('reboot_after_provision', false) then
        node.vm.provision 'shell', reboot: true
      end
    end
  end
end