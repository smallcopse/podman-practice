# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
require './utils/network.rb'
require './utils/plugin.rb'

VAGRANTFILE_API_VERSION = '2'
VAGRANTFILE_DIR = File.dirname(__FILE__)
ANSIBLE_INVENTORY_PATH = 'provisioning/inventories/rocky8/hosts.yml'
VIRTUALBOX_INTNET = 'kollanet'
PRIVATE_KEY_PATH = '~/.vagrant.d/insecure_private_key'

# ------------------------
# install required plugins
# ------------------------
required_plugins = %w( vagrant-vbguest vagrant-disksize vagrant-hostmanager )
_retry = false
required_plugins.each do |plugin|
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    _retry=true
  end
end

if (_retry)
  exec "vagrant " + ARGV.join(' ')
end

# ---------------------------
# load inventory file (hosts)
# ---------------------------
begin
  conf = YAML.load_file(File.join(VAGRANTFILE_DIR, ANSIBLE_INVENTORY_PATH))
rescue Errno::ENOENT => ex
  STDERR.puts <<-EOT
    File does not exist. '#{ANSIBLE_INVENTORY_PATH}'
  EOT
  exit;
end

# ---------------------------
# Vagrant
# ---------------------------
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Use the same key for each node
  config.ssh.insert_key = false
  config.hostmanager.enabled = true
  # config.ssh.private_key_path = ["~/.vagrant.d/insecure_private_key"]
  # config.ssh.insert_key = true
  # config.vbguest.auto_update = false

  conf['all']['hosts'].each do |host, hostvars|
    config.vm.define host do |node|
      # set hostname as inventory hostname     
      node.vm.hostname = hostvars['hostname']
      
      # set vagrant box and box version
      node.vm.box = hostvars['box']
      node.vm.box_version = hostvars['box_version']
      
      # set disk size if specified
      if hostvars.has_key? 'disk_size' then
        node.disksize.size = hostvars['disk_size']
      end

      if hostvars.has_key?('remove_etc_hosts_localhost') and hostvars['remove_etc_hosts_localhost'] then
        node.vm.provision 'shell', privileged: true, inline: "sed -i -E 's/^127\..*"+hostvars['hostname']+".*/#&/g' /etc/hosts"
      end

      # vagrant-vbguest plugin settings
      if hostvars.has_key? 'vbguest' then
        setup_vbguest(node, hostvars['vbguest'])
      end

      # network interface settings
      hostvars.fetch('network_interfaces',[]).each_with_index do |net_if, idx|
        if_idx = idx + 2
        add_network_interface(node, net_if, if_idx)
      end
      
      # Virtualbox Settings
      node.vm.provider 'virtualbox' do |vb|
        vb.customize ["modifyvm", :id, "--firmware", "efi"]
        vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
        vb.customize ["modifyvm", :id, "--nictype1",  "virtio"]
        vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
        vb.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
        vb.customize ['modifyvm', :id, '--cableconnected1', 'on']
        
        # sync host time
        vb.customize ["setextradata", :id, "VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled", 0]
        
        # set display name in virtualbox
        vb.name = hostvars['hostname']

        # set CPUs
        if hostvars.has_key? 'cpus' then
          vb.cpus = hostvars['cpus']
        end

        # set memory size
        if hostvars.has_key? 'memory_size' then
          vb.memory = hostvars['memory_size']
        end
      end

      # synced_folder
      hostvars.fetch('synced_folder', []).each do |folder|
        node.vm.synced_folder File.join(VAGRANTFILE_DIR, folder['host']), folder['guest']
      end
      # if hostvars.has_key? 'synced_folder' then
      #   # node.vm.provision 'shell', privileged: false, inline: <<-SHELL
      #   #   yum install kernel-devel
      #   #   yum -y update kernel
      #   # SHELL
        
      #   hostvars.fetch('synced_folder', []).each do |folder|
      #     node.vm.synced_folder File.join(VAGRANTFILE_DIR, folder['host']), folder['guest']
      #   end
      # end

      # run povision pre commands
      if hostvars.has_key? 'provision_pre_commands' then
        hostvars['provision_pre_commands'].each do |pre_command|
          node.vm.provision 'shell', privileged: false, inline: pre_command
        end
      end

      # copy private key if 'copy_private_key: true' is specified
      if hostvars.fetch('copy_private_key', false) then
        node.vm.provision 'file', source: PRIVATE_KEY_PATH, destination: '~/.ssh/insecure_private_key'
        node.vm.provision 'shell', privileged: false, inline: <<-SHELL
          chmod 600 ~/.ssh/insecure_private_key
          cat ~/.ssh/insecure_private_key >> ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
        SHELL
      end

      # set hostname/ip to /etc/hosts
      # add_inventory_hosts_to_etc_hosts(node, conf['all']['hosts'])
      # node.vm.provision 'shell', privileged: false, inline: etc_hosts_command

      # reboot VM if reboot_after_provision=true
      if hostvars.fetch('reboot_after_provision', false) then
        node.vm.provision 'shell', reboot: true
      end
    end
  end
end